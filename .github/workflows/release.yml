name: Release

on:
  release:
    types: [published]

jobs:
  helm-package:
    name: Package and Publish Helm Chart
    needs: [release]
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure Git
        run: |
          git config user.name "$GITHUB_ACTOR"
          git config user.email "$GITHUB_ACTOR@users.noreply.github.com"

      - name: Install Helm
        uses: azure/setup-helm@v3

      - name: Update Chart version
        run: |
          # Update Chart.yaml with the release version
          VERSION="${{ github.event.release.tag_name }}"
          VERSION="${VERSION#v}"  # Remove 'v' prefix if present
          sed -i "s/^version:.*/version: $VERSION/" helm/kube-janitor-go/Chart.yaml
          sed -i "s/^appVersion:.*/appVersion: \"$VERSION\"/" helm/kube-janitor-go/Chart.yaml
          
          # Verify the changes
          echo "Updated Chart.yaml:"
          grep -E "^(version|appVersion):" helm/kube-janitor-go/Chart.yaml

      - name: Install dependencies
        run: pip install pyyaml

      - name: Regenerate values documentation
        run: |
          cd helm/kube-janitor-go
          python3 scripts/generate-values-docs.py

      - name: Package Helm chart
        run: |
          mkdir -p .build
          helm package helm/kube-janitor-go -d .build
          
          # Verify the packaged chart
          echo "Packaged chart contents:"
          tar -tzf .build/*.tgz | grep Chart.yaml
          tar -xzf .build/*.tgz -O kube-janitor-go/Chart.yaml | grep -E "^(version|appVersion):"
          
      - name: Upload chart to release
        uses: softprops/action-gh-release@v2
        with:
          files: .build/*.tgz

      - name: Prepare gh-pages directory
        run: |
          # Clone the repository with just the gh-pages branch if it exists
          git clone --single-branch --branch gh-pages https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git gh-pages 2>/dev/null || {
            echo "gh-pages branch does not exist, creating it..."
            mkdir -p gh-pages
            cd gh-pages
            git init
            git config user.name "${{ github.actor }}"
            git config user.email "${{ github.actor }}@users.noreply.github.com"
            git checkout -b gh-pages
            echo "# Helm Repository" > README.md
            echo "" >> README.md
            echo "This branch hosts Helm charts for kube-janitor-go." >> README.md
            git add README.md
            git commit -m "Initial gh-pages branch"
            cd ..
          }

      - name: Copy and Index Charts
        run: |
          cp .build/*.tgz gh-pages/
          cd gh-pages
          
          # Generate index.yaml (merge with existing if present)
          if [ -f index.yaml ]; then
            helm repo index . --merge index.yaml --url https://blaxel-ai.github.io/kube-janitor-go
          else
            helm repo index . --url https://blaxel-ai.github.io/kube-janitor-go
          fi
          
          # Also index for direct GitHub release downloads
          helm repo index . --merge index.yaml --url https://github.com/${{ github.repository }}/releases/download/${{ github.event.release.tag_name }}
          
          # Verify the index contains correct version
          VERSION="${{ github.event.release.tag_name }}"
          VERSION="${VERSION#v}"  # Remove 'v' prefix if present
          echo "Index.yaml entry for release:"
          grep -A 20 "version: ${VERSION}" index.yaml || true

      - name: Commit and Push to gh-pages
        run: |
          cd gh-pages
          
          # Configure git identity
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor }}@users.noreply.github.com"
          
          git add .
          git commit -m "Release Helm chart version ${{ github.event.release.tag_name }}" || echo "No changes to commit"
          
          # Set remote if not already set (for newly created branch)
          git remote -v | grep origin || git remote add origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git
          
          # Push to gh-pages branch
          git push origin gh-pages --force

  release:
    name: Build and Push Release Image
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}

      - name: Build and push Docker images
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          platforms: linux/amd64,linux/arm64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            VERSION=${{ github.ref_name }}
